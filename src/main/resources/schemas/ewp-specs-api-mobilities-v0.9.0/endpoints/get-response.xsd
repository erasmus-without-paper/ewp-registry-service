<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:a="https://github.com/erasmus-without-paper/ewp-specs-types-address/tree/stable-v1"
    xmlns:p="https://github.com/erasmus-without-paper/ewp-specs-types-phonenumber/tree/stable-v1"
    xmlns:course="https://github.com/erasmus-without-paper/ewp-specs-api-courses/tree/stable-v1"
    xmlns:xml="http://www.w3.org/XML/1998/namespace"
    xmlns:ewp="https://github.com/erasmus-without-paper/ewp-specs-architecture/blob/stable-v1/common-types.xsd"
    elementFormDefault="qualified"

    targetNamespace="https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/blob/stable-v1/endpoints/get-response.xsd"
    xmlns="https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/blob/stable-v1/endpoints/get-response.xsd"
>
    <!-- WRTODO: Do not release until dependants are released: Courses API -->

    <xs:import
        schemaLocation="https://raw.githubusercontent.com/erasmus-without-paper/ewp-specs-architecture/stable-v1/common-types.xsd"
        namespace="https://github.com/erasmus-without-paper/ewp-specs-architecture/blob/stable-v1/common-types.xsd"
    />

    <xs:import
        schemaLocation="https://raw.githubusercontent.com/erasmus-without-paper/ewp-specs-types-address/stable-v1/schema.xsd"
        namespace="https://github.com/erasmus-without-paper/ewp-specs-types-address/tree/stable-v1"
    />

    <xs:import
        schemaLocation="https://raw.githubusercontent.com/erasmus-without-paper/ewp-specs-types-phonenumber/stable-v1/schema.xsd"
        namespace="https://github.com/erasmus-without-paper/ewp-specs-types-phonenumber/tree/stable-v1"
    />

    <xs:import
        schemaLocation="https://raw.githubusercontent.com/erasmus-without-paper/ewp-specs-api-courses/master/response.xsd"
        namespace="https://github.com/erasmus-without-paper/ewp-specs-api-courses/tree/stable-v1"
    />

    <xs:annotation>
        <xs:documentation>
            This schema is a part of the Erasmus Without Paper project. Before you start
            using it, make sure you have read the general rules described here:

            http://developers.erasmuswithoutpaper.eu/
        </xs:documentation>
    </xs:annotation>

    <xs:element name="mobilities-get-response">
        <xs:annotation>
            <xs:documentation>
                This describes the format of the response returned by the EWP Outgoing
                Mobilities API.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:group ref="SequenceOfMobilities" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Clients should use the `mobility-id` subelements to match objects with their
                            `mobility_id` request parameters.
                        </xs:documentation>
                    </xs:annotation>
                </xs:group>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:group name="SequenceOfMobilities">
        <xs:annotation>
            <xs:documentation>
                This is global, because it is used in external XSDs. It MUST stay this way, for
                backward compatibility.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:group ref="SingleMobilityObject" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        A list of matching mobilities.

                        Currently there's only type of mobility exposed by this API. More types MAY
                        come in the future.
                    </xs:documentation>
                </xs:annotation>
            </xs:group>
        </xs:sequence>
    </xs:group>

    <xs:group name="SingleMobilityObject">
        <xs:annotation>
            <xs:documentation>
                Represents a single mobility of any type.

                This is global, because it is used in external XSDs. It MUST stay this way, for
                backward compatibility.
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="student-mobility-for-studies"/>
        </xs:choice>
    </xs:group>

    <xs:element name="student-mobility-for-studies">
        <xs:complexType>
            <xs:annotation>
                <xs:documentation>
                    This describes a single Student Mobility for Studies.

                    In the future, it may become a "subclass" of a more generic Mobility parent class
                    (and some of the fields might be moved to the parent).

                    Immutable elements
                    ------------------

                    Every mobility has its unique sending-hei, receiving-hei and nominee, which
                    MUST NOT change after the mobility is created. For example, if it turns out
                    that a different student will be nominated for this mobility, then a new
                    mobility-id MUST be created for such nomination. However, the properties of
                    these mobility-related entities still MAY change. E.g. the student's name may
                    get updated.
                </xs:documentation>
            </xs:annotation>
            <xs:sequence>
                <xs:element name="mobility-id" type="ewp:AsciiPrintableIdentifier" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Identifier of the mobility (as assigned by the sending HEI). Immutable.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="sending-hei" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            This describes the sending HEI - the home institution of the student being sent.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="hei-id" type="xs:string" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        SCHAC ID of the institution. Immutable.
                                        https://github.com/erasmus-without-paper/ewp-specs-api-registry/#schac-identifiers

                                        Clients can fetch more information on this HEI from the Institutions API
                                        served on the sending HEI's servers.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="ounit-id" type="ewp:AsciiPrintableIdentifier" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Optional organizational unit ID. If given, then it refers to the unit within
                                        the sending HEI's organizational structure, which is responsible for this
                                        student.

                                        Clients can fetch more information on this unit from Organizational Units API
                                        served on the sending HEI's servers.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="iia-id" type="ewp:AsciiPrintableIdentifier" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Optional ID of the Institutional Agreement based on which the student is being
                                        nominated/sent.

                                        This ID should be provided by the server ONLY if it implements EWP's
                                        Interinstitutional Agreements API. Clients can fetch more information on this
                                        agreement from IIAs API served on the sending HEI's servers (e.g. contact
                                        information to an appropriate IRO representative responsible for sending
                                        students for mobilities based on this IIA).
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="receiving-hei" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            This describes the receiving HEI - the institution which will be hosting the
                            student.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="hei-id" type="xs:string" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        SCHAC ID of the institution. Immutable.
                                        https://github.com/erasmus-without-paper/ewp-specs-api-registry/#schac-identifiers

                                        Clients can fetch more information on this HEI from the Institutions API
                                        served on the *receiving HEI's* servers.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="ounit-id" type="ewp:AsciiPrintableIdentifier" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Optional organizational onit ID. If given, then it refers to the unit within
                                        the receiving HEI's organizational structure, which is responsible for receiving
                                        this student.

                                        If provided, then it MUST have the value of the "external" ounit-id, exactly as
                                        it has been assigned by the *receiving HEI* in its Organizational Units API.
                                        Clients can fetch more information on this unit from Organizational Units API
                                        served on the *receiving HEI's* servers.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="iia-id" type="ewp:AsciiPrintableIdentifier" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Each IIA partner can assign an ID of its own to the same IIA. If the server is
                                        aware of the *receiving HEI's* ID assigned to the IIA based on which the
                                        student is being sent, then it outputs it here.

                                        Clients can fetch more information on this agreement from IIAs API served on
                                        the *receiving HEI's* servers (e.g. contact information of the coordinator who
                                        will receive the students).
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="student" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The section describes the student who is being sent for this mobility. Immutable.

                            These fields MAY change in time (e.g. after the student changes his name or
                            address).
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="given-names" type="ewp:StringWithOptionalLang" minOccurs="1" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
                                        The given names of the person.

                                        It MAY be specified in multiple languages (and/or multiple alphabets), as it
                                        has been explained in the `contact` element:
                                        https://github.com/erasmus-without-paper/ewp-specs-types-contact
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="family-name" type="ewp:StringWithOptionalLang" minOccurs="1" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
                                        The family name of the person.

                                        It MAY be specified in multiple languages (and/or multiple alphabets), as it
                                        has been explained in the `contact` element:
                                        https://github.com/erasmus-without-paper/ewp-specs-types-contact
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="birth-date" type="xs:date" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        RECOMMENDED. Date of birth.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="citizenship" type="ewp:CountryCode" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Code of the country to which the person belongs administratively and that
                                        issues the ID card and/or passport. E.g. "PL".
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="gender" type="ewp:Gender" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Optional code of the gender.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="email" type="ewp:Email" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Email address at which student should be contacted.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="photo-url" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
                                        If given, then it contains the URLs at which the client may fetch the photo of
                                        the student. Multiple URLs may be provided with multiple versions of the photo,
                                        or various types of the photo.

                                        * Whenever possible, the server SHOULD provide an up-to-date photo in a
                                          standard EU passport photo aspect ratio (width x height = 35 x 45), eligable
                                          to be used for a student card. Such photo SHOULD come first in this list.

                                        * Other photos in many aspect ratios may follow. They may be variations of the
                                          same photo (e.g. without cropping, or with a different cropping), or they may
                                          be completely different photos.

                                        * All URLs MUST be accessible to anonymous requesters as described here:
                                          https://github.com/erasmus-without-paper/ewp-specs-sec-cliauth-none

                                        * URLs MAY contain some kind of access tokens which may expire in time. Clients
                                          MAY send the URL directly to their users' brosers, but they should be aware
                                          that such URLs may expire at any moment. If the clients need to have a copy
                                          of the photo, then they MUST copy the contents of the photo to their servers.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:simpleContent>
                                        <xs:extension base="ewp:HTTPS">
                                            <xs:attribute name="size-px" use="optional">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        If given, then this attribute contains the exact dimensions (width and height)
                                                        of the photo, in pixels. These are expressed by a single string of two values
                                                        concatenated with "x" character, e.g. "350x450" means that the photo's width is
                                                        350 pixels, and its height is 450 pixels.

                                                        Clients may use this attribute to quickly browse through the list of URLs and
                                                        pick one that suits their needs best (without actually fetching the images). It
                                                        is RECOMMENDED (but not required) for the servers to supply it.
                                                    </xs:documentation>
                                                </xs:annotation>
                                                <xs:simpleType>
                                                    <xs:restriction base="xs:string">
                                                        <xs:pattern value="[0-9]+x[0-9]+"/>
                                                    </xs:restriction>
                                                </xs:simpleType>
                                            </xs:attribute>
                                            <xs:attribute name="public" use="optional" type="xs:boolean" default="false">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        By default, all photos MUST be treated as private personal data, and SHOULD
                                                        NOT be viewed to other users.

                                                        However, if this attribute is "true", then either it means that the **nominee
                                                        himself** has granted for this photo to be viewed **publicly**. This means that
                                                        the client MAY show this photo to all other students and staff members, and
                                                        even to anonymous users of his system. However, this choice MAY change at any
                                                        time, so - if the client rely on it - then it MUST revalidate if the photo is
                                                        still public every now and then.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="date" use="optional" type="xs:date">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        If given, then it indicates the time when the photo has been taken, or
                                                        uploaded. This date can be used by the client to verify if the photo is "fresh
                                                        enough", for example for the purposes of issuing student cards, etc.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                        </xs:extension>
                                    </xs:simpleContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element ref="a:street-address" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Optional street address of the person's home.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element ref="a:mailing-address" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        The postal address of this person. (This is usually much more useful
                                        than street address.)
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element ref="p:phone-number" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
                                        A list of phone numbers at which this person can possibly be reached.
                                        The "best" numbers should be listed first.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="status" type="MobilityStatus" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Current status of the mobility.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="planned-arrival-date" type="xs:date" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Planned start date of the mobility (when the student is supposed to arrive).
                            This date is provided by the sending HEI before the mobility.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="planned-departure-date" type="xs:date" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Planned end date of the mobility (when the student is supposed to leave).
                            This date is provided by the sending HEI before the mobility.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="actual-arrival-date" type="xs:date" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Actual start date of the mobility (when the student has actually arrived).
                            This date is provided by the receiving HEI (either by direct contact between
                            coordinators, or via the `update` endpoint).
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="actual-departure-date" type="xs:date" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Actual end date of the mobility (when the student has actually left).
                            This date is provided by the receiving HEI (either by direct contact between
                            coordinators, or via the `update` endpoint).
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="eqf-level-studied-at-nomination" type="ewp:EqfLevel" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The student is sent for the mobility as part of one of his study programmes.
                            This field contains the student's EQF level on this programme *at the time of
                            the nomination* (and it SHOULD NOT change in time, as opposed to the fields
                            present in the `student` element).
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="eqf-level-studied-at-departure" type="ewp:EqfLevel" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            This is similar to the `eqf-level-studied-at-nomination` element, but this time
                            we are interested in the EQF level the student **will have** when the mobility
                            actually begins (according to many IROs this is more important than the one the
                            students has at the time of the nomination).

                            Server implementers are encouraged to supply both values. If it is not
                            possible, then at least one SHOULD be supplied.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="nominee-isced-f-code" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The student is sent to the mobility as part of one of his study programmes.
                            This field contains the ISCED-F field of education code that is closest to the
                            subject this programme (or, as EUC put is, "closest to the degree to be awarded
                            to the student by the Sending Institution").
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="nominee-language-skill" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            List of the student's language skills *at the time of the nomination* (they
                            SHOULD NOT change in time).
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="language" type="xs:language" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        The BCP 47 code of the language.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="cefr-level" type="ewp:CefrLevel" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        The level of language skill the student had.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="components-studied" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Different versions of the list of components studied (or planned to be studied)
                            at the receiving HEI.

                            We need different versions of this list because the EUC LA template (attached in
                            this XSD's repository) requires it. As has been reported by WP2, the receiving
                            HEI might also need all these versions.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:sequence minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        The "before mobility" and "latest approved" sections are optional. It is allowed
                                        to have only the "latest draft" section (this indicates that no LA has yet been
                                        approved).

                                        However, if "before mobility" section exists, then we also require "latest
                                        approved" section to exist. In many cases, `latest-approved-changes` will be
                                        empty, and `latest-approved-snapshot` will contain the exact contents as the
                                        `before-mobility-snapshot` does. It might seem redundant, but we require it for
                                        completeness (to make sure all partners understand what "latest approved"
                                        means).
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:element name="before-mobility-changes" minOccurs="1" maxOccurs="1" type="ListOfChangesTo_ComponentsStudied">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This element is not used when PDF LA is generated, but it is still required.
                                            It allows server implementers to include a history of changes to the "before
                                            mobility" section, before it has been approved. If the server doesn't keep such
                                            history, then an appropriately formatted copy of the `before-mobility-snapshot`
                                            is returned here.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="before-mobility-snapshot" minOccurs="1" maxOccurs="1" type="SnapshotOf_ComponentsStudied">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The snapshot of courses *planned* to be studied when the first version of the LA
                                            is signed.

                                            Note: This element corresponds to "Table A" on the EUC LA template (attached
                                            in this XSD's repository).
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="latest-approved-changes" minOccurs="1" maxOccurs="1" type="ListOfChangesTo_ComponentsStudied">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The list of changes made to the LA components after it has been first signed.
                                            When LA is signed for the first time this element is empty, but it is often
                                            filled later on.

                                            Note: This element corresponds to "Table A2" on the EUC LA template (attached
                                            in this XSD's repository).
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="latest-approved-snapshot" minOccurs="1" maxOccurs="1" type="SnapshotOf_ComponentsStudied">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The latest approved snapshot of courses studied (or planned to the studedied). When
                                            LA is signed for the first time this element contains the same courses as the
                                            `before-mobility-snapshot` does, but this may change later in time.

                                            Note: If you want to compare this to the tables in the EUC LA PDF template
                                            (attached in this XSD's repository), then this element describes what "Table A"
                                            would look like if all changes from "Table A2" were applied to it. It often
                                            *resambles* "Table C", but it's NOT its equivalent (EWP ToRs API serves an
                                            equivalent of "Table C"). You can discuss it here:
                                            https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/issues/17
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                            <xs:element name="latest-draft-changes" minOccurs="1" maxOccurs="1" type="ListOfChangesTo_ComponentsStudied">
                                <xs:annotation>
                                    <xs:documentation>
                                        This element is not used when PDF LA is generated, but it is still required. It
                                        allows server implementers to publish proposed changes to the LA, before they
                                        are approved. If the server doesn't store such proposals (or if it doesn't want
                                        to publish them), then this element will be empty.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="latest-draft-snapshot" minOccurs="1" maxOccurs="1" type="SnapshotOf_ComponentsStudied">
                                <xs:annotation>
                                    <xs:documentation>
                                        This element is not used when PDF LA is generated, but it is still required.
                                        Similar to the `latest-draft-changes` element, but the proposed changes are
                                        presented in a unified form. If the server doesn't store proposals (or if it
                                        doesn't want to publish them), then this element will contain a copy of the
                                        `latest-approved-snapshot` (or, if no `latest-approved-snapshot` exists, then
                                        it will be empty).
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="components-recognized" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Different versions of the list of components recognized (or planned to be
                            recognized) at the sending HEI.

                            We need different versions of this list because the EUC LA template (attached in
                            this XSD's repository) requires it.

                            PLEASE READ THE ANNOTATIONS ON THE `components-studied` ELEMENT. The
                            `components-recognized` element has the same base format as the
                            `components-studied` element does, and so, **we are not describing this format
                            here again**. The only difference is that other types of entities are described
                            by it - in EUC LA template, these entities are described by tables "B" and
                            "B2" (while `components-studied` describe tables "A" and "A2").

                            Note, that very few servers are planning to provide this feature at the initial
                            stages of EWP adoption:
                            https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/issues/11
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:sequence minOccurs="0" maxOccurs="1">
                                <xs:element name="before-mobility-changes" minOccurs="1" maxOccurs="1" type="ListOfChangesTo_ComponentsRecognized"/>
                                <xs:element name="before-mobility-snapshot" minOccurs="1" maxOccurs="1" type="SnapshotOf_ComponentsRecognized"/>
                                <xs:element name="latest-approved-changes" minOccurs="1" maxOccurs="1" type="ListOfChangesTo_ComponentsRecognized"/>
                                <xs:element name="latest-approved-snapshot" minOccurs="1" maxOccurs="1" type="SnapshotOf_ComponentsRecognized"/>
                            </xs:sequence>
                            <xs:element name="latest-draft-changes" minOccurs="1" maxOccurs="1" type="ListOfChangesTo_ComponentsRecognized"/>
                            <xs:element name="latest-draft-snapshot" minOccurs="1" maxOccurs="1" type="SnapshotOf_ComponentsRecognized"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="component-studied">
        <xs:annotation>
            <xs:documentation>
                This describes a single entry on the list of components studied (or planned to
                be studied) at the Receiving HEI.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="los-id" type="course:LosID" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The EWP's LOS ID of the component, exactly as exposed via the receiving HEI's
                            Courses API. Please note, that it is USUALLY NOT the same as the "Component
                            Code" present on the EUC template (compare with `los-code` element).
                            https://github.com/erasmus-without-paper/ewp-specs-api-courses#unique-identifiers

                            Notes for sending HEI implementers
                            ----------------------------------

                            This field is optional, but you are still REQUIRED to have a place for it in
                            your database.

                            You do not need to fill it out. In fact, in most cases it will be very
                            difficult or even impossible for you to fill it out, because quite probably
                            neither you nor your student has access to the correct LOS ID nor LOI ID. This
                            is due to the fact that, at the time of the nomination, many courses won't have
                            a proper LOI created in the receiving HEI's system yet (and so, you won't see
                            it via the receiving HEI's Courses API).

                            However, the receiving HEI *has* that knowledge (or *will have*, eventually),
                            and you SHOULD allow the receiving HEI to fill out this gap. (The receiving HEI
                            can do this by calling the `update` endpoint with a proper update-request type,
                            which you are RECOMMENDED to support.)

                            Of course, you (or rather your coordinator, or your student) can also fill it
                            out yourself, once a proper LOI becomes available in the receiving HEI's
                            system. However, in order to allow your users to do that you will be required
                            to replicate the entire course catalogue of the receiving HEI on your side, and
                            this can be hard (see Course Replication API for details).

                            You might wonder - if it's optional, and the receiving HEI is not even required
                            to fill it out - why do we require sending HEIs to support it? We agree that
                            all this might seem a bit vague, but the problem is that we (EWP designers) are
                            actually not yet sure *who should* be responsible for filling out this field.
                            We are however quite certain that both parties would benefit from having it
                            filled out (e.g. when matching LA components to ToR courses).

                            If the field *is* given (either by you, or by the receiving HEI), then the
                            values of *many other* fields can be derived from (copied from) the matching
                            values served by receiving HEI's Courses API. In other words, if you bind your
                            components to specific LOI, then - most probably - you don't want to allow your
                            users to directly edit this component's properties anymore.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="los-code" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            This is the optional component code to be displayed to the end user. This field
                            MAY be entered "by hand" (for example by the student), especially if no
                            `los-id` is given. It might assist other users (and/or computer systems) when
                            they're trying to identify the component, but it does not necessarilly contain
                            a valid EWP's LOS ID used in the Courses API.

                            In case of many HEIs, it will be equal to the LOS ID provided above, but it's
                            purpose is entirely different. LOS IDs are surrogate identifiers (and, as such,
                            should not be displayed to the user), while LOS codes are "human readable", but
                            don't they are *not used* to identify entities in EWP network.

                            Related links:
                            https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/issues/9
                            https://en.wikipedia.org/wiki/Surrogate_key
                            https://en.wikipedia.org/wiki/Natural_key
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="title" type="xs:string" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Component title at the receiving institution. This field MAY be entered "by
                            hand" (for example by the student), especially if no `los-id` is given. It
                            might assist other users (and/or computer systems) when they're trying to
                            identify the component, but it does not necessarilly match the name exactly.

                            Note, that this field does not contain an `xml:lang` attribute, and it can be
                            provided only once (preferably in English). If clients want to retrieve titles
                            in other languages, then they can do this via the Courses API.

                            If it so happens that a component changes its name (on the receiving HEI's
                            servers), then it is the *receiving HEI* that SHOULD update all the titles of
                            the matching LOSes in all remote mobilities (of course, the *sending* HEI MAY
                            fix such inconsistencies too, if it somehow notices that a title has been
                            changed).
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="loi-id" type="course:LoiID" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The EWP's LOI ID of the component, exactly as exposed via the receiving HEI's
                            Courses API.
                            https://github.com/erasmus-without-paper/ewp-specs-api-courses#unique-identifiers

                            Also, please see "Notes for sending HEI implementers" in the `los-id` element!
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="academic-term-display-name" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The *name* of the academic term of the LOI at the receiving institution. This
                            field MAY be entered "by hand" (for example by the student), especially if no
                            `loi-id` is given. It might assist other users (and/or computer systems) when
                            they're trying to identify the LOI, but it does not necessarilly need to match
                            the name of academic term exactly.

                            Note, that we do not require a full-fledged academic-term element here
                            (https://github.com/erasmus-without-paper/ewp-specs-types-academic-term). The
                            sending HEI is NOT required to store start dates and end dates of
                            the receiving HEI's academic terms. If the clients want to fetch such
                            dates, then they can do this via the Courses API (each LOI element has them).
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="credit" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            This describes various credit types which the student is expected to achieve by
                            completing this component. Usually these SHOULD be ECTS credits, but there MAY
                            be some exceptions (e.g. see footnotes in the attached EUC LA template).
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="scheme" type="xs:string" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Currently there is only one predefined scheme you can have here - "ects"
                                        (lowercase).

                                        You can also include any number of other credits with custom schemes.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="value" type="xs:decimal" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        The number of credits being awarded.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="component-recognized">
        <xs:annotation>
            <xs:documentation>
                This describes a single entry on the list of components recognized (or planned
                to be recognized) at the Sending HEI.

                As opposed to the `component-studied` element, both `los-id` and `loi-id` element
                are REQUIRED in `component-recognized`. This means that *if* the sending HEI
                wants to fill out the recognition section of the LA (it is recommended to do
                so), then it SHOULD also implement the Courses API (so that all the clients can
                access the LOIs properties, such as credits awarded for it).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="los-id" type="course:LosID" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The EWP's LOS ID of the component, exactly as exposed via the sending HEI's
                            Courses API. Please note, that is NOT necessarilly the same as the "Component
                            Code" present on the EUC template.
                            https://github.com/erasmus-without-paper/ewp-specs-api-courses#unique-identifiers
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="loi-id" type="course:LoiID" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            The EWP's LOI ID of the component, exactly as exposed via the sending HEI's
                            Courses API.
                            https://github.com/erasmus-without-paper/ewp-specs-api-courses#unique-identifiers
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:simpleType name="MobilityStatus">
        <xs:restriction base="xs:string">
            <xs:enumeration value="nomination">
                <xs:annotation>
                    <xs:documentation>
                        The sending HEI has nominated the student for mobility. The proposal has not
                        yet been accepted nor rejected by the receiving HEI.

                        This is the default status with which mobility entities are first created.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="rejected">
                <xs:annotation>
                    <xs:documentation>
                        The nomination has been rejected by the receiving HEI.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="live">
                <xs:annotation>
                    <xs:documentation>
                        The nomination has been accepted by the receiving HEI. This status doesn't
                        usually change throughout the mobility.

                        The mobility SHOULD have this stutus during the time when LA can be modified.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="recognized">
                <xs:annotation>
                    <xs:documentation>
                        The student has returned from the mobility and all achievements have been
                        recognized as indicated on the `component-recognized` list.

                        At this point, the mobility SHOULD become read-only. The latest revision of it
                        SHOULD be approved by all parties (no subsequent draft revisions should exist).
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cancelled">
                <xs:annotation>
                    <xs:documentation>
                        The nomination has been cancelled (either by the student, or by one of the
                        partner HEIs).
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ListOfChangesTo_ComponentsStudied">
        <xs:annotation>
            <xs:documentation>
                Describes a list of changes applied to the list of studied components. The
                order of elements matters (see the `index` element).

                This is global, because it is used in external XSDs. It MUST stay this way, for
                backward compatibility.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="insert-component-studied">
                <xs:annotation>
                    <xs:documentation>
                        This represents the action of adding a new `component-studied` element to the
                        list of components (to be) studied.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="_SingleChangeToAList_INSERT">
                            <xs:sequence>
                                <xs:element ref="component-studied" minOccurs="1" maxOccurs="1">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This describes the component to be inserted.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
            <xs:element name="remove-component-studied">
                <xs:annotation>
                    <xs:documentation>
                        This represents the action of removing one of the `component-studied` elements.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="_SingleChangeToAList_DELETE">
                            <xs:sequence>
                            </xs:sequence>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="ListOfChangesTo_ComponentsRecognized">
        <xs:annotation>
            <xs:documentation>
                Describes a list of changes applied to the list of components recognized. The
                order of elements matters (see the `index` element).

                This is global, because it is used in external XSDs. It MUST stay this way, for
                backward compatibility.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="insert-component-recognized">
                <xs:annotation>
                    <xs:documentation>
                        This represents the action of adding a new `component-recognized` element.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="_SingleChangeToAList_INSERT">
                            <xs:sequence>
                                <xs:element ref="component-recognized" minOccurs="1" maxOccurs="1">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This describes the component to be inserted.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
            <xs:element name="remove-component-recognized">
                <xs:annotation>
                    <xs:documentation>
                        This represents the action of removing one of the `component-recognized` elements.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="_SingleChangeToAList_DELETE">
                            <xs:sequence>
                            </xs:sequence>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="SnapshotOf_ComponentsStudied">
        <xs:annotation>
            <xs:documentation>
                Describes a snapshot of the list of studied components.

                This is global, because it is used in other XSDs. It MUST stay this way, for
                backward compatibility.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="component-studied" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        An ordered list of components present in this snapshot.

                        The order matters (search for `index` elements in this XSD to understand why).
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="approval" minOccurs="0" maxOccurs="3">
                <xs:annotation>
                    <xs:documentation>
                        Indicates which of the three approving parties (student, and two coordinators)
                        have already approved this snapshot.

                        All approved snapshots (such as `before-mobility-snapshot` and
                        `latest-approved-snapshot`) MUST contain three `approval` elements. On the
                        other hand, the `latest-draft-snapshot` MUST be approved by zero, one or two
                        parties, it MUST NOT be approved by all three parties (because it wouldn't be
                        a draft anymore).
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="by-party" minOccurs="1" maxOccurs="1" type="ApprovingParty">
                            <xs:annotation>
                                <xs:documentation>
                                    The approving party.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="timestamp" minOccurs="0" maxOccurs="1" type="xs:dateTime">
                            <xs:annotation>
                                <xs:documentation>
                                    The time when the snapshot has been approved by this party (if known).

                                    Servers are NOT REQUIRED to store this information. For example, some HEIs
                                    might get their student approvals on paper (instead of allowing the students to
                                    approve them online). Such HEIs will put the "approved by the student" label on
                                    the snapshot automatically, immediatelly after the snapshot gets approved by
                                    the sending coordinator (aka `sending-hei` party). In such cases, the actual
                                    date of student's approval is not stored in the system, but the HEI "vouches"
                                    that such approval took place.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="should-now-be-approved-by" minOccurs="0" maxOccurs="3" type="ApprovingParty">
                <xs:annotation>
                    <xs:documentation>
                        An optional indicator that the server is now waiting for this snapshot to be
                        approved by the parties provided here.

                        There are numerous ways in which the sending HEIs might want the process of
                        draft approval to proceed. This element allows these HEIs suggest the order of
                        approvals they prefer. Some HEIs might even *reject* approvals unless a proper
                        `should-now-be-approved-by` is in place. Please discuss here:
                        https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/issues/16

                        The presence of this element MAY trigger some special behavior in the client
                        UIs. For example, the mobilities waiting for user's approval can be highlighted
                        for this user when he's browsing through the list of mobilities. Or, perhaps,
                        the user might even receive an email notification.

                        This element MUST NOT refer to parties which have already approved this
                        snapshot (so, in effect, it can only be used in the `latest-draft-snapshot`
                        element). It also MUST NOT be used if the snapshot doesn't contain any changes
                        (i.e. when `latest-draft-changes` is empty).
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="in-effect-since" type="xs:dateTime" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Indicates the date since which the snapshot is (or was) considered "in effect"
                    by the sending HEI. In theory, this should match the latest of the three
                    approval dates, but it doesn't have to. Servers are not required to provide
                    this date, but it's RECOMMENDED to do so. It MAY be an approximate date. If
                    these dates are provided, then their order MUST be consistent with the order of
                    the snapshots on the list.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="SnapshotOf_ComponentsRecognized">
        <xs:annotation>
            <xs:documentation>
                Describes a snapshot of the list of components recognized.

                This is global, because it is used in external XSDs. It MUST stay this way, for
                backward compatibility.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="component-recognized" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="_SingleChangeToAList" abstract="true">
        <xs:annotation>
            <xs:documentation>
                An abstract parent class which represents a single change occuring on some list
                of elements.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="reason" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        An optional reason for the change.

                        UI designers are advised to supply a number of suggested reasons for their
                        users (so that they can pick one when making the change). Users SHOULD be
                        allowed to specify their own custom reason for the change too.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="display-text" type="ewp:MultilineString" minOccurs="1" maxOccurs="1">
                            <xs:annotation>
                                <xs:documentation>
                                    A human-readable description of the reason - preferrably in English. It will
                                    often be printed in PDF LA document (e.g. in the "Reason for change" column of
                                    A2 or B2 table - see attached EUC LA template).

                                    The value of this element can sometimes be inferred from `ewp-reason-code`, but
                                    for forward-compatibility reasons, this element is required regardless of this
                                    fact.

                                    If the reason cannot be provided, server implementers MAY provide an empty
                                    string here. This is NOT RECOMMENDED though. Users SHOULD give some reason for
                                    each of their changes, and the server SHOULD store these reasons.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="ewp-reason-code" minOccurs="0" maxOccurs="1">
                            <xs:annotation>
                                <xs:documentation>
                                    An optional reason code. It is RECOMMENDED to provide it, if the reason for
                                    change matches one of the reasons provided in the enumeration below. If no
                                    match can be found, then this element MUST NOT be provided.

                                    Currently, the enumeration supports viable reasons for changing
                                    `components-studied` list only. This element MUST NOT be provided for
                                    changes in `components-recognized`.

                                    Attached EUC LA template defines seven "Reasons for exceptional changes to
                                    study programme abroad", and assigns them numbers from 1 to 7. EUC does say
                                    whether this assignment is backward-compatible or not, so we must assume it
                                    isn't. Therefore, we introduce an enumeration of our own, which is intended to
                                    stay backward-compatible.

                                    IMPORTANT: New values MAY be added to this enumeration in future releases of
                                    this API, and such expansion is considered backward-compatible. Clients MUST be
                                    aware of this fact - if you find an unknown value here, you MUST treat it the
                                    same way as if no `ewp-reason-code` was given at all. Server MUST NOT expand
                                    their set of used reason codes without consulting EWP Partners - new reason
                                    codes MUST be added to the enumeration before they can be used.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="not-available">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defined by EUC with the following description: Previously selected educational
                                                component is not available at the Receiving Institution.

                                                This reason MUST be used ONLY for "delete" changes.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="language-mismatch">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defined by EUC with the following description: Component is in a different
                                                language than previously specified in the course catalogue.

                                                This reason MUST be used ONLY for "delete" changes.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="timetable-conflict">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defined by EUC with the following description: Timetable conflict.

                                                This reason MUST be used ONLY for "delete" changes.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="substituting-deleted">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defined by EUC with the following description: Substituting a deleted component.

                                                This reason MUST be used ONLY for "insert" changes.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="extending-mobility">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defined by EUC with the following description: Extending the mobility period.

                                                This reason MUST be used ONLY for "insert" changes.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="properties-update">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This one is NOT defined by EUC, but it seemed reasonable to add it here. It can
                                                be used with both "delete" and "insert" changes, and it indicates an update in
                                                the component properties - like a change in the component's name (e.g. a
                                                spelling error), or the number of awarded ECTS points. The exact reason for the
                                                change SHOULD be specified in the `display-text` element.

                                                This reason MUST NOT be provided if the component is *actually* being removed
                                                or added. It is used *only* when an *existing* component is *updated* (which is
                                                represented as two changes - a "delete" and an "insert" - preferably in this
                                                order, next to each other).

                                                It's worth noting that some servers MAY also choose to "rewrite history"
                                                in case of unimportant mistakes, like obvious spelling errors in component name.
                                                Such "rewrite" will cause a component to instantly change its name in all
                                                snapshots (even those snapshots which have been approved a long time ago).

                                                You can discuss this code here:
                                                https://github.com/erasmus-without-paper/ewp-specs-api-mobilities/issues/15#issuecomment-283988998
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="_SingleChangeToAList_INSERT" abstract="true">
        <xs:annotation>
            <xs:documentation>
                An abstract parent class which represents a single INSERT occurring on some list
                of elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="_SingleChangeToAList">
                <xs:sequence>
                     <xs:element name="index" type="xs:nonNegativeInteger" minOccurs="1" maxOccurs="1">
                         <xs:annotation>
                             <xs:documentation>
                                 Zero-based index of the element before which to insert.
                             </xs:documentation>
                         </xs:annotation>
                     </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="_SingleChangeToAList_DELETE" abstract="true">
        <xs:annotation>
            <xs:documentation>
                An abstract parent class which represents a single DELETE occurring on some list
                of elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="_SingleChangeToAList">
                <xs:sequence>
                     <xs:element name="index" type="xs:nonNegativeInteger" minOccurs="1" maxOccurs="1">
                         <xs:annotation>
                             <xs:documentation>
                                 Zero-based index of the element to be removed.
                             </xs:documentation>
                         </xs:annotation>
                     </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="ApprovingParty">
        <xs:annotation>
            <xs:documentation>
                There are three approving parties when it comes to Learning Agreements (and
                possibly, other documents related to mobility). This type is an enumeration of
                all these parties.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="student">
                <xs:annotation>
                    <xs:documentation>
                        The student being sent for the mobility.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sending-hei">
                <xs:annotation>
                    <xs:documentation>
                        The sending HEI, usually represented by a "Sending Coordinator".
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="receiving-hei">
                <xs:annotation>
                    <xs:documentation>
                        The receiving HEI, usually represented by a "Receiving Coordinator".
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
