<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xml="http://www.w3.org/XML/1998/namespace"
    xmlns:ewp="https://github.com/erasmus-without-paper/ewp-specs-architecture/blob/stable-v1/common-types.xsd"
    xmlns:omobility="https://github.com/erasmus-without-paper/ewp-specs-api-omobilities/blob/stable-v1/endpoints/get-response.xsd"
    elementFormDefault="qualified"

    targetNamespace="https://github.com/erasmus-without-paper/ewp-specs-api-omobilities/blob/stable-v1/endpoints/update-request.xsd"
    xmlns="https://github.com/erasmus-without-paper/ewp-specs-api-omobilities/blob/stable-v1/endpoints/update-request.xsd"
>
    <xs:import
        schemaLocation="https://raw.githubusercontent.com/erasmus-without-paper/ewp-specs-architecture/stable-v1/common-types.xsd"
        namespace="https://github.com/erasmus-without-paper/ewp-specs-architecture/blob/stable-v1/common-types.xsd"
    />

    <xs:import
        schemaLocation="https://raw.githubusercontent.com/erasmus-without-paper/ewp-specs-api-omobilities/master/endpoints/get-response.xsd"
        namespace="https://github.com/erasmus-without-paper/ewp-specs-api-omobilities/blob/stable-v1/endpoints/get-response.xsd"
    />

    <xs:annotation>
        <xs:documentation>
            This schema is a part of the Erasmus Without Paper project. Before you start
            using it, make sure you have read the general rules described here:

            http://developers.erasmuswithoutpaper.eu/
        </xs:documentation>
    </xs:annotation>

    <xs:element name="omobilities-update-request">
        <xs:annotation>
            <xs:documentation>
                This describes the format of the REQUEST to be submitted to the `update`
                endpoint of EWP Outgoing Mobilities API.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="sending-hei-id" type="ewp:AsciiPrintableIdentifier" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            ID of the sending HEI of the mobility (or mobilities) being updated.

                            All updated mobilities in a single request MUST come from a single sending HEI.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:choice minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            One request contains exactly one update element. But there are many possible
                            types of this update element.

                            Servers publish the list of supported update in their manifest entry.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:element ref="approve-components-studied-draft-v1"/>
                    <xs:element ref="update-components-studied-v1"/>
                    <xs:element ref="update-statuses-v1"/>
                    <!--
                    Note for future XSD designers: When adding new types here, remember to add them
                    in the manifest-entry.xsd file too.
                    -->
                </xs:choice>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="approve-components-studied-draft-v1">
        <xs:annotation>
            <xs:documentation>
                This request is sent by the receiving HEI when it wants to approve the
                `latest-draft-snapshot` version of components-studied. For many HEIs, this
                approval has the same meaning as "signing" this section of the LA.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="omobility-id" type="ewp:AsciiPrintableIdentifier" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            ID of the mobility which this update request is about.

                            The sending partner of this mobility MUST match the partner provided in
                            `sending-hei-id`.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="approving-party" minOccurs="1" maxOccurs="1" type="omobility:ApprovingParty">
                    <xs:annotation>
                        <xs:documentation>
                            The party which is approving. In almost all cases, this will be
                            `receiving-hei`, but in some use cases it MAY also be `student` (if the
                            student is allowed to use receiving HEI's UI to approve Learning
                            Agreements).

                            The server MUST verify this value (it MUST NOT assume that it always equals
                            `receiving-hei`). If remote approval by this party is unsupported by this
                            server, HTTP 400 response MUST be returned, with proper user-message (e.g.
                            "University of Warsaw requires its students to approve their Learning
                            Agreements via local USOSweb system. It is not allowed to approve them
                            remotely.").
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="current-latest-draft-snapshot" minOccurs="1" maxOccurs="1" type="omobility:SnapshotOf_ComponentsStudied">
                    <xs:annotation>
                        <xs:documentation>
                            The current state of the `latest-draft-snapshot`, which is also the state which
                            is being approved. (It is not allowed to approve any other state, but you might
                            be allowed to send suggestions via `update-components-studied-v1`.)

                            This element is required here to prevent edit conflicts. The server MUST
                            verify it, in similar way as it's described in `update-components-studied-v1`.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="update-components-studied-v1">
        <xs:annotation>
            <xs:documentation>
                This request is sent by the receiving HEI when it want to suggest changes in
                the `components-studied` section of the mobility object.

                The sending HEI, on whose servers the mobility object is stored, MAY allow for
                the receiving HEI to change `components-studied` freely, but it also MAY keep
                these changes "on the side", and require a human to review them (e.g. a Sending
                Coordinator, or a student).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="omobility-id" type="ewp:AsciiPrintableIdentifier" minOccurs="1" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            ID of the mobility which this update request is about.

                            The sending partner of this mobility MUST match the partner provided in
                            `sending-hei-id`.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="current-latest-draft-snapshot" minOccurs="1" maxOccurs="1" type="omobility:SnapshotOf_ComponentsStudied">
                    <xs:annotation>
                        <xs:documentation>
                            The current state of the `latest-draft-snapshot`, which is the *base for the
                            suggested changes*. It is required here to prevent edit conflicts:

                            https://en.wikipedia.org/wiki/Edit_conflict

                            The client - the receiving HEI - extracts this element from the response of the
                            Outgoing Mobilities API's `get` endpoint served at the sending HEI.

                            If the contents of `current-latest-draft-snapshot` don't match the current
                            values as kept in the server's database, then the server MUST respond with
                            HTTP 409 error response.
                            https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

                            * Error response SHOULD include the `user-message` element with a brief
                              explanation (e.g. "Your copy of the Learning Agreement is not up-to-date. We
                              are unable to process your suggestions because we lack a common base for
                              comparison. Please refresh your copy from our servers and repeat your
                              request.").

                            * XML supplied by the client MAY use different XML namespace prefixes than the
                              one the server uses in its Outgoing Mobilities API. These prefixes MUST NOT
                              be taken into account when snapshots are being compared.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="suggested-changes" minOccurs="1" maxOccurs="1" type="omobility:ListOfChangesTo_ComponentsStudied">
                    <xs:annotation>
                        <xs:documentation>
                            The list of suggested changes. Changes are formatted in the same format as in
                            Outgoing Mobilities API.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="snapshot-with-changes-applied" minOccurs="1" maxOccurs="1" type="omobility:SnapshotOf_ComponentsStudied">
                    <xs:annotation>
                        <xs:documentation>
                            This is the "target" snapshot which the requester is aiming for.

                            It might seem redundant because it can be generated automatically from the
                            other two. It is required however - to prove consistency. We want both parties
                            to be sure that they generate changes and snapshots properly.

                            If the server detects that the snapshot calculated by the client is different
                            than a similar snapshot calculated by the server, then it MUST respond with an
                            either HTTP 400 error. At this point, both parties should review their snapshot
                            generation algorithms.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="update-statuses-v1">
        <xs:annotation>
            <xs:documentation>
                This request is usually sent by the receiving HEI when it wants to accept or
                reject a group of nominations proposed by the sending HEI. In other words, it
                allows to suggest that the status of the mobility should be changed from
                "nomination" to either "nomination-verified" or "rejected".

                Additionally, receiving HEI MAY also use this API to suggest changing the
                status to other values (e.g. notify that the mobility is cancelled), but
                servers are not required to support such changes (if a particular change is
                not supported for some reason, then the server will describe the fact in its
                HTTP 400 response message).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="single-update" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            This update request may contain multiple "single updates". This is different
                            than in most of the other update types, which support only a single mobility at
                            a time.

                            Servers MUST run this update in a transaction. If something is wrong with one
                            of the "single updates", then none of the updates should be saved (and the
                            error response should describe what went wrong).
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="omobility-id" type="ewp:AsciiPrintableIdentifier" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        ID of the mobility being updated.

                                        The sending partner of this mobility MUST match the partner provided in
                                        `sending-hei-id`.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="new-status" type="omobility:MobilityStatus" minOccurs="1" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        Suggested new status for this mobility.

                                        If you want to accept the nomination, then you should send "nomination-verified"
                                        here. If you want to reject it, then send "rejected". You MAY also allow your
                                        users to send other status values, but - if you choose to do so - then you
                                        SHOULD make your users aware, that in many cases such transaction will fail
                                        (because most partners will use this update-type only for accepting and
                                        rejecting nominations).
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="comment" type="ewp:MultilineString" minOccurs="0" maxOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        An optional comment. It is RECOMMENDED for comments to be provided only when
                                        necessary (i.e. when nominations are rejected). These comments MUST be visible
                                        only to the IRO members, not the students.

                                        Note, that this API allows for every mobility to have a different comment.
                                        However, it is also okay for the clients to simply "batch copy" a single
                                        comment to all mobilities being rejected.

                                        It is left unspecified how servers should handle these comments - e.g. they may
                                        store them along their mobilities, or they may forward them to specific
                                        persons, etc.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

</xs:schema>
